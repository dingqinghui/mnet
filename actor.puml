@startuml
namespace actor {
    class Actor << (S,Aquamarine) >> {
        - id uint64
        - revChan <font color=blue>chan</font> iface.IActorMessage
        - protocols <font color=blue>map</font>[iface.ActorMessageType]*Protocol

        + Init(_ ...<font color=blue>interface</font>{}) 
        + GetId() uint64
        + RegistryProtocol(msgType iface.ActorMessageType, parse iface.IParse, dispatch iface.DispatchFun) 
        + PutMessage(msg iface.IActorMessage) 
        + Run() 
        + Dispatch(msg iface.IActorMessage) 
        + Destroy() 
        + OnConnected(connection miface.IConnection) 
        + OnDisconnect(connection miface.IConnection) 
        + OnProcess(connection miface.IConnection, pack miface.IPackage) 
        + NetListen(options ...core.Option) miface.IServer
        + NetConnect(options ...core.Option) miface.IClient

    }
    class Message << (S,Aquamarine) >> {
        + MsgType iface.ActorMessageType
        + Data []byte

        + GetType() iface.ActorMessageType
        + GetData() []byte

    }
    class Protocol << (S,Aquamarine) >> {
        - msgType iface.ActorMessageType
        - parse iface.IParse
        - dispatch iface.DispatchFun

    }
    class SocketMessage << (S,Aquamarine) >> {
        + Act SocketActType
        + Connection miface.IConnection
        + Pack miface.IPackage

    }
    class actor.SocketActType << (T, #FF7700) >>  {
    }
}
"iface.IActorMessage" *-- "actor.SocketMessage"

"iface.IActor" <|-- "actor.Actor"
"iface.IActorMessage" <|-- "actor.Message"

namespace iface {
    interface IActor  {
        + GetId() uint64
        + Init(args ...<font color=blue>interface</font>{}) 
        + Run() 
        + PutMessage(msg IActorMessage) 
        + RegistryProtocol(msgType ActorMessageType, parse IParse, dispatch DispatchFun) 

    }
    interface IActorMessage  {
        + GetType() ActorMessageType
        + GetData() []byte

    }
    interface IParse  {
        + Register(msgId uint32, msg <font color=blue>interface</font>{}) error
        + UnMarshal(data []byte) ([]<font color=blue>interface</font>{}, error)
        + Marshal( ...<font color=blue>interface</font>{}) ([]byte, error)

    }
    class iface.ActorMessageType << (T, #FF7700) >>  {
    }
    class iface.DispatchFun << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>(IActorMessage, ...<font color=blue>interface</font>{}) " as fontcolorbluefuncfontIActorMessagefontcolorblueinterfacefont {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}


namespace parser {
    class JsonParser << (S,Aquamarine) >> {
        - m <font color=blue>map</font>[uint32]reflect.Type

        + Register(msgId uint32, msg <font color=blue>interface</font>{}) error
        + Marshal(args ...<font color=blue>interface</font>{}) ([]byte, error)
        + UnMarshal(data []byte) ([]<font color=blue>interface</font>{}, error)

    }
}
"sync.RWMutex" *-- "parser.JsonParser"

"iface.IParse" <|-- "parser.JsonParser"

"__builtin__.int" #.. "actor.SocketActType"
"__builtin__.int" #.. "iface.ActorMessageType"
"iface.fontcolorbluefuncfontIActorMessagefontcolorblueinterfacefont" #.. "iface.DispatchFun"
@enduml
