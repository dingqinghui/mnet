@startuml
namespace actorNew {
    class ActorContext << (S,Aquamarine) >> {
        - actor IActor
        - pid IPid
        - message <font color=blue>interface</font>{}

        - kill() 

        + Actor() IActor
        + Self() IPid
        + ReceiveMessage(msg <font color=blue>interface</font>{}) 
        + Message() <font color=blue>interface</font>{}
        + Stop(pid IPid) 
        + Kill(pid IPid) 

    }
    interface IActor  {
        + ReceiveMessage(c IContext) 

    }
    interface IContext  {
    }
    interface IMailBox  {
        + PostMessage(message <font color=blue>interface</font>{}) error
        + Start() 
        + Stop() 

    }
    interface IMessageConsumer  {
        + ReceiveMessage( <font color=blue>interface</font>{}) 

    }
    interface IPid  {
        + Id() int64
        + Process() iProcess

    }
    class Kill << (S,Aquamarine) >> {
        + SystemMessage() 

    }
    class MessageEnvelope << (S,Aquamarine) >> {
        + Header messageHeader
        + Message <font color=blue>interface</font>{}
        + Sender IPid

        + GetHeader(key string) string
        + SetHeader(key string, value string) 

    }
    class Pid << (S,Aquamarine) >> {
        - id int64
        - process iProcess

        + Id() int64
        + Process() iProcess

    }
    class Props << (S,Aquamarine) >> {
        - producer Producer
        - onInits []InitFunc
        - spawner Spawner

        - spawn() IPid

        + GetSpawner() Spawner

    }
    interface ReadonlyMessageHeader  {
        + Get(key string) string
        + Keys() []string
        + Length() int
        + ToMap() <font color=blue>map</font>[string]string

    }
    class ReceiveFunc << (S,Aquamarine) >> {
        + ReceiveMessage(c IContext) 

    }
    class RootContext << (S,Aquamarine) >> {
        + Self() IPid
        + Actor() IActor

    }
    class StartMessage << (S,Aquamarine) >> {
    }
    class Stop << (S,Aquamarine) >> {
        + SystemMessage() 

    }
    class actorNew.InitFunc << (T, #FF7700) >>  {
    }
    class actorNew.Producer << (T, #FF7700) >>  {
    }
    class actorNew.PropsOption << (T, #FF7700) >>  {
    }
    class actorNew.ReceiveFunc << (T, #FF7700) >>  {
    }
    class actorNew.Spawner << (T, #FF7700) >>  {
    }
    class actorNew.messageHeader << (T, #FF7700) >>  {
    }
    class actorProcess << (S,Aquamarine) >> {
        - mailbox IMailBox

        + PutMessage(msg <font color=blue>interface</font>{}) 
        + Stop() 

    }
    class childStop << (S,Aquamarine) >> {
        - pid IPid

        + SystemMessage() 

    }
    class future << (S,Aquamarine) >> {
        - pid IPid
        - result <font color=blue>interface</font>{}
        - timeout time.Duration
        - waitCh <font color=blue>chan</font> <font color=blue>interface</font>{}

        + Pid() IPid
        + ReceiveMessage(msg <font color=blue>interface</font>{}) 
        + Wait() bool
        + Result() <font color=blue>interface</font>{}

    }
    class futureProcess << (S,Aquamarine) >> {
        - mailbox IMailBox

        + PutMessage(msg <font color=blue>interface</font>{}) 
        + Stop() 

    }
    interface iBasePart  {
        + Self() IPid
        + Actor() IActor

    }
    interface iMessagePart  {
        + Message() <font color=blue>interface</font>{}

    }
    interface iProcess  {
        + PutMessage( <font color=blue>interface</font>{}) 
        + Stop() 

    }
    interface iRootContext  {
    }
    interface iSenderPart  {
        + Send(pid IPid, message <font color=blue>interface</font>{}) 
        + Call(pid IPid, message <font color=blue>interface</font>{}, timeout time.Duration) *future

    }
    interface iSpawnerPart  {
        + Spawn(p *Props) IPid

    }
    interface iStopPart  {
        + Stop(pid IPid) 
        + Kill(pid IPid) 

    }
    interface iSystemMessage  {
        + SystemMessage() 

    }
    class mailboxChan << (S,Aquamarine) >> {
        - queue <font color=blue>chan</font> <font color=blue>interface</font>{}
        - consumer IMessageConsumer
        - exit atomic.Value

        - schedule() 

        + PostMessage(message <font color=blue>interface</font>{}) error
        + Start() 
        + Stop() 

    }
    class messageHeader << (S,Aquamarine) >> {
        + Get(key string) string
        + Set(key string, value string) 
        + Keys() []string
        + Length() int
        + ToMap() <font color=blue>map</font>[string]string

    }
    class sender << (S,Aquamarine) >> {
        + Send(pid IPid, message <font color=blue>interface</font>{}) 
        + Call(pid IPid, message <font color=blue>interface</font>{}, timeout time.Duration) *future

    }
    class spawner << (S,Aquamarine) >> {
        + Spawn(p *Props) IPid

    }
}
"actorNew.sender" *-- "actorNew.ActorContext"
"actorNew.spawner" *-- "actorNew.ActorContext"
"actorNew.iBasePart" *-- "actorNew.IContext"
"actorNew.iMessagePart" *-- "actorNew.IContext"
"actorNew.iSenderPart" *-- "actorNew.IContext"
"actorNew.iSpawnerPart" *-- "actorNew.IContext"
"actorNew.iStopPart" *-- "actorNew.IContext"
"actorNew.sender" *-- "actorNew.RootContext"
"actorNew.spawner" *-- "actorNew.RootContext"
"actorNew.iBasePart" *-- "actorNew.iRootContext"
"actorNew.iSenderPart" *-- "actorNew.iRootContext"
"actorNew.iSpawnerPart" *-- "actorNew.iRootContext"

"actorNew.IMessageConsumer" <|-- "actorNew.ActorContext"
"actorNew.iBasePart" <|-- "actorNew.ActorContext"
"actorNew.iMessagePart" <|-- "actorNew.ActorContext"
"actorNew.iStopPart" <|-- "actorNew.ActorContext"
"actorNew.iSystemMessage" <|-- "actorNew.Kill"
"actorNew.IPid" <|-- "actorNew.Pid"
"actorNew.IActor" <|-- "actorNew.ReceiveFunc"
"actorNew.iBasePart" <|-- "actorNew.RootContext"
"actorNew.iSystemMessage" <|-- "actorNew.Stop"
"actorNew.iProcess" <|-- "actorNew.actorProcess"
"actorNew.iSystemMessage" <|-- "actorNew.childStop"
"actorNew.IMessageConsumer" <|-- "actorNew.future"
"actorNew.iProcess" <|-- "actorNew.futureProcess"
"actorNew.IMailBox" <|-- "actorNew.mailboxChan"
"actorNew.ReadonlyMessageHeader" <|-- "actorNew.messageHeader"
"actorNew.iSenderPart" <|-- "actorNew.sender"
"actorNew.iSpawnerPart" <|-- "actorNew.spawner"

"__builtin__.<font color=blue>map</font>[string]string" #.. "actorNew.messageHeader"
"actorNew.<font color=blue>func</font>() IActor" #.. "actorNew.Producer"
"actorNew.<font color=blue>func</font>(*Props) " #.. "actorNew.PropsOption"
"actorNew.<font color=blue>func</font>(*Props) IPid" #.. "actorNew.Spawner"
"actorNew.<font color=blue>func</font>(IContext) " #.. "actorNew.InitFunc"
"actorNew.<font color=blue>func</font>(IContext) " #.. "actorNew.ReceiveFunc"
@enduml
